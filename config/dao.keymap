/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define LR_NUM 4
#define LR_DEL 5
#define LR_NAV 6

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    macros {
        delete_end_line: delete_end_line {
            label = "delete_end_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(END) &kp DEL>;
        };

        delete_begin_line: delete_begin_line {
            label = "delete_begin_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(HOME) &kp DEL>;
        };

        lang_shift: lang_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &tog 1>;
            label = "LANG_SHIFT";
        };

        lang_eng: lang_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &to 1>;
            label = "LANG_ENG";
        };

        lang_rus: lang_rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &to 0>;
            label = "LANG_RUS";
        };

        goto_symbol_layer_changelang: goto_symbol_layer_changelang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp N1>,
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&kp N2 &kp LA(LEFT_SHIFT)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>;

            label = "GOTO_SYMBOL_LAYER_CHANGELANG";
            tap-ms = <10>;
        };

        test: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp S &kp D &kp F>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "TEST";
        };
    };
};

/ {
    behaviors {
        alttab_back_or_v: alt_tab_backward {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB_V";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LS(TAB)>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        alttab_forward_or_r: alt_tab_forward {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB_R";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp TAB>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        ALT: alt_for_alttab {
            compatible = "zmk,behavior-hold-tap";
            label = "ALTTAB";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            retro-tap;
            bindings = <&kp>, <&kp>;
        };

        shift_grave_esc: shift_grave_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_GRAVE_ESC";
            bindings = <&kp ESC>, <&kp LS(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&goto_symbol_layer_changelang>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <6>;
        };

        test_behavior: test_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "TEST_BEHAVIOR";
            bindings = <&test>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <6>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_navigatio {
            timeout-ms = <30>;
            key-positions = <51 42>;
            bindings = <&mo 5>;
        };

        combo_collapse {
            timeout-ms = <50>;
            key-positions = <30 42>;
            bindings = <&kp LG(M)>;
        };

        combo_printscreen {
            timeout-ms = <50>;
            key-positions = <30 17>;
            bindings = <&kp RG(RS(S))>;
        };

        combo_ctl_enter {
            timeout-ms = <30>;
            key-positions = <30 31>;
            bindings = <&kp LC(RET)>;
        };

        goto_default_layer {
            bindings = <&to 0>;
            key-positions = <12 25>;
            timeout-ms = <200>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
          &kp F12           &test    &test_behavior 0 A  &kp HASH     &kp DLLR              &kp PERCENT                   &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp N9   &kp N0    &kp BACKSLASH
&kp LWIN  &kp TAB           &kp Q    &kp W               &kp E        &alttab_forward_or_r  &kp T                         &kp Y           &kp U          &kp I         &kp O    &kp P     &kp LBKT       &mt RWIN RBKT
          &shift_grave_esc  &lt 3 A  &kp S               &ALT LALT D  &kp F                 &kp G                         &kp H           &kp J          &kp K         &kp L    &kp SEMI  &mt RCTRL SQT
          &kp LALT          &kp Z    &kp X               &kp C        &alttab_back_or_v     &kp B                         &kp N           &kp M          &kp COMMA     &kp DOT  &kp FSLH  &lang_eng
                                                         &sk LSHFT    &mt LCTRL RET         &test_behavior 0 BACKSPACE    &lt 4 LS(FSLH)  &lt 5 SPACE    &lt 5 FSLH
            >;
        };

        ENG_layer {
            bindings = <
          &kp F12           &kp EXCL  &kp AT  &kp HASH     &kp DLLR              &kp PERCENT    &kp CARET    &kp AMPERSAND  &kp ASTERISK  &kp N9   &kp N0    &kp BACKSLASH
&kp LWIN  &kp TAB           &kp Q     &kp W   &kp E        &alttab_forward_or_r  &kp T          &kp Y        &kp U          &kp I         &kp O    &kp P     &kp LBKT       &mt RWIN RBKT
          &shift_grave_esc  &lt 3 A   &kp S   &ALT LALT D  &kp F                 &kp G          &kp H        &kp J          &kp K         &kp L    &kp SEMI  &mt RCTRL SQT
          &kp LALT          &kp Z     &kp X   &kp C        &alttab_back_or_v     &kp B          &kp N        &kp M          &kp COMMA     &kp DOT  &kp FSLH  &lang_rus
                                              &sk LSHFT    &mt LCTRL RET         &lt 2 BSPC     &lt 4 COMMA  &lt 5 SPACE    &lt 5 DOT
            >;
        };

        symbols_eng_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
        &trans          &trans     &kp EXCL      &trans     &trans     &trans       &trans     &trans             &trans            &trans            &trans         &trans
&trans  &kp UNDER       &kp F1     &kp F2        &kp F3     &kp F4     &kp F5       &kp F6     &kp LS(QUESTION)   &kp F8            &kp F9            &kp F10        &kp F11  &kp F12
        &kp GRAVE       &kp EXCL   &kp AT        &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET  &kp RIGHT_BRACKET  &kp LEFT_BRACKET  &kp RPAR          &kp LPAR       &trans
        &mt LALT EQUAL  &kp SLASH  &kp ASTERISK  &kp MINUS  &kp EQUAL  &kp PLUS     &kp UNDER  &kp RIGHT_BRACE    &kp LEFT_BRACE    &kp GREATER_THAN  &kp LESS_THAN  &trans
                                                 &mo 6      &trans     &trans       &trans     &trans             &lt 6 DEL
            >;
        };

        num_layer {
            bindings = <
       &none  &none   &none   &none   &none   &none         &none   &none  &none   &none  &none  &none
&none  &none  &none   &kp N7  &kp N8  &kp N9  &kp KP_DOT    &none   &none  &none   &none  &none  &none  &none
       &none  &trans  &kp N4  &kp N5  &kp N6  &kp N0        &none   &none  &none   &none  &none  &none
       &none  &none   &kp N1  &kp N2  &kp N3  &none         &none   &none  &none   &none  &none  &none
                              &trans  &none   &trans        &trans  &none  &trans
            >;
        };

        del_layer {
            bindings = <
       &none  &none  &none  &none   &none  &none     &none   &none               &none         &none       &none             &none
&none  &none  &none  &none  &none   &none  &none     &none   &delete_begin_line  &none         &none       &delete_end_line  &none  &none
       &none  &none  &none  &none   &none  &none     &none   &kp BSPC            &kp DOWN      &kp UP      &kp DEL           &none
       &none  &none  &none  &none   &none  &none     &none   &kp LC(BSPC)        &kp LC(DOWN)  &kp LC(UP)  &kp LC(DEL)       &none
                            &trans  &none  &trans    &trans  &none               &trans
            >;
        };

        nav_layer {
            bindings = <
       &none  &none         &none       &none          &none          &none      &none   &none         &none         &none       &none          &none
&none  &none  &kp HOME      &kp PG_UP   &kp PAGE_DOWN  &kp END        &none      &none   &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        &none  &none
       &none  &kp LEFT      &kp UP      &kp DOWN       &kp RIGHT      &none      &none   &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &none
       &none  &kp LC(LEFT)  &kp LC(UP)  &kp LC(DOWN)   &kp LC(RIGHT)  &kp RET    &none   &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &none
                                        &trans         &none          &trans     &trans  &none         &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
            &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
&sys_reset  &bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader  &sys_reset
            &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
            &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                                     &trans        &out OUT_TOG  &trans          &trans        &none         &trans
            >;
        };
    };
};
